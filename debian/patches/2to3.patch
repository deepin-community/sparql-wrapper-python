Author: Andreas Tille <tille@debian.org>
Last-Update: Tue, 11 Jan 2022 15:19:25 +0100
Description: Run 2to3 in quilt patch

diff --git a/SPARQLWrapper/KeyCaseInsensitiveDict.py b/SPARQLWrapper/KeyCaseInsensitiveDict.py
index ab59f53..cc2dbe0 100644
--- a/SPARQLWrapper/KeyCaseInsensitiveDict.py
+++ b/SPARQLWrapper/KeyCaseInsensitiveDict.py
@@ -28,7 +28,7 @@ class KeyCaseInsensitiveDict(dict):
         """
         :param dict d: The source dictionary.
         """
-        for k, v in d.items():
+        for k, v in list(d.items()):
             self[k] = v
 
     def __setitem__(self, key, value):
diff --git a/SPARQLWrapper/SmartWrapper.py b/SPARQLWrapper/SmartWrapper.py
index fc4493e..d8ea47a 100644
--- a/SPARQLWrapper/SmartWrapper.py
+++ b/SPARQLWrapper/SmartWrapper.py
@@ -19,7 +19,7 @@
   :requires: `RDFLib <https://rdflib.readthedocs.io>`_ package.
 """
 
-import urllib2
+import urllib.request, urllib.error, urllib.parse
 from types import *
 import SPARQLWrapper
 from SPARQLWrapper.Wrapper import JSON, SELECT
@@ -209,12 +209,12 @@ class Bindings(object):
             if len(keys) == 0:
                 return False
             for k in keys:
-                if not isinstance(k, basestring) or not k in self.variables:
+                if not isinstance(k, str) or not k in self.variables:
                     return False
             return True
 
         def _nonSliceCase(key):
-            if isinstance(key, basestring) and key != "" and key in self.variables:
+            if isinstance(key, str) and key != "" and key in self.variables:
                 # unicode or string:
                 return [key]
             elif type(key) is list or type(key) is tuple:
diff --git a/SPARQLWrapper/Wrapper.py b/SPARQLWrapper/Wrapper.py
index 12429dc..e868d51 100644
--- a/SPARQLWrapper/Wrapper.py
+++ b/SPARQLWrapper/Wrapper.py
@@ -22,17 +22,17 @@
   :requires: `RDFLib <https://rdflib.readthedocs.io>`_ package.
 """
 
-import urllib
-import urllib2
-from urllib2 import urlopen as urlopener  # don't change the name: tests override it
+import urllib.request, urllib.parse, urllib.error
+import urllib.request, urllib.error, urllib.parse
+from urllib.request import urlopen as urlopener  # don't change the name: tests override it
 import base64
 import re
 import sys
 import warnings
 
 import json
-from KeyCaseInsensitiveDict import KeyCaseInsensitiveDict
-from SPARQLExceptions import QueryBadFormed, EndPointNotFound, EndPointInternalError, Unauthorized, URITooLong
+from .KeyCaseInsensitiveDict import KeyCaseInsensitiveDict
+from .SPARQLExceptions import QueryBadFormed, EndPointNotFound, EndPointInternalError, Unauthorized, URITooLong
 from SPARQLWrapper import __agent__
 
 #  From <https://www.w3.org/TR/sparql11-protocol/#query-success>
@@ -804,7 +804,7 @@ class SPARQLWrapper(object):
             :raises TypeError: If the :attr:`query` parameter is not an unicode-string or utf-8 encoded byte-string.
         """
         if sys.version < '3':  # have to write it like this, for 2to3 compatibility
-            if isinstance(query, unicode):
+            if isinstance(query, str):
                 pass
             elif isinstance(query, str):
                 query = query.decode('utf-8')
@@ -874,8 +874,8 @@ class SPARQLWrapper(object):
                 return
 
             keepalive_handler = HTTPHandler()
-            opener = urllib2.build_opener(keepalive_handler)
-            urllib2.install_opener(opener)
+            opener = urllib.request.build_opener(keepalive_handler)
+            urllib.request.install_opener(opener)
         except ImportError:
             warnings.warn("keepalive support not available, so the execution of this method has no effect")
 
@@ -941,10 +941,10 @@ class SPARQLWrapper(object):
 
         pairs = (
             "%s=%s" % (
-                urllib.quote_plus(param.encode('UTF-8'), safe='/'),
-                urllib.quote_plus(value.encode('UTF-8'), safe='/')
+                urllib.parse.quote_plus(param.encode('UTF-8'), safe='/'),
+                urllib.parse.quote_plus(value.encode('UTF-8'), safe='/')
             )
-            for param, values in query_parameters.items() for value in values
+            for param, values in list(query_parameters.items()) for value in values
         )
         return '&'.join(pairs)
 
@@ -1005,11 +1005,11 @@ class SPARQLWrapper(object):
                 warnings.warn("update operations MUST be done by POST")
 
             if self.requestMethod == POSTDIRECTLY:
-                request = urllib2.Request(uri + "?" + self._getRequestEncodedParameters())
+                request = urllib.request.Request(uri + "?" + self._getRequestEncodedParameters())
                 request.add_header("Content-Type", "application/sparql-update")
                 request.data = self.queryString.encode('UTF-8')
             else:  # URL-encoded
-                request = urllib2.Request(uri)
+                request = urllib.request.Request(uri)
                 request.add_header("Content-Type", "application/x-www-form-urlencoded")
                 request.data = self._getRequestEncodedParameters(("update", self.queryString)).encode('ascii')
         else:
@@ -1018,15 +1018,15 @@ class SPARQLWrapper(object):
 
             if self.method == POST:
                 if self.requestMethod == POSTDIRECTLY:
-                    request = urllib2.Request(uri + "?" + self._getRequestEncodedParameters())
+                    request = urllib.request.Request(uri + "?" + self._getRequestEncodedParameters())
                     request.add_header("Content-Type", "application/sparql-query")
                     request.data = self.queryString.encode('UTF-8')
                 else:  # URL-encoded
-                    request = urllib2.Request(uri)
+                    request = urllib.request.Request(uri)
                     request.add_header("Content-Type", "application/x-www-form-urlencoded")
                     request.data = self._getRequestEncodedParameters(("query", self.queryString)).encode('ascii')
             else:  # GET
-                request = urllib2.Request(uri + "?" + self._getRequestEncodedParameters(("query", self.queryString)))
+                request = urllib.request.Request(uri + "?" + self._getRequestEncodedParameters(("query", self.queryString)))
 
         request.add_header("User-Agent", self.agent)
         request.add_header("Accept", self._getAcceptHeader())
@@ -1036,11 +1036,11 @@ class SPARQLWrapper(object):
                 request.add_header("Authorization", "Basic %s" % base64.b64encode(credentials.encode('utf-8')).decode('utf-8'))
             elif self.http_auth == DIGEST:
                 realm = self.realm
-                pwd_mgr = urllib2.HTTPPasswordMgr()
+                pwd_mgr = urllib.request.HTTPPasswordMgr()
                 pwd_mgr.add_password(realm, uri, self.user, self.passwd)
-                opener = urllib2.build_opener()
-                opener.add_handler(urllib2.HTTPDigestAuthHandler(pwd_mgr))
-                urllib2.install_opener(opener)
+                opener = urllib.request.build_opener()
+                opener.add_handler(urllib.request.HTTPDigestAuthHandler(pwd_mgr))
+                urllib.request.install_opener(opener)
             else:
                 valid_types = ", ".join(_allowedAuth)
                 raise NotImplementedError("Expecting one of: {0}, but received: {1}".format(valid_types,
@@ -1072,7 +1072,7 @@ class SPARQLWrapper(object):
             else:
                 response = urlopener(request)
             return response, self.returnFormat
-        except urllib2.HTTPError as e:
+        except urllib.error.HTTPError as e:
             if e.code == 400:
                 raise QueryBadFormed(e.read())
             elif e.code == 404:
@@ -1186,9 +1186,9 @@ class QueryResult(object):
         """
         return self.response.__iter__()
 
-    def next(self):
+    def __next__(self):
         """Method for the standard iterator."""
-        return self.response.next()
+        return next(self.response)
 
     def _convertJSON(self):
         """
@@ -1416,17 +1416,17 @@ class QueryResult(object):
             width = self.__get_results_width(results)
         index = 0
         for var in results["head"]["vars"]:
-            print ("?" + var).ljust(width[index]), "|",
+            print(("?" + var).ljust(width[index]), "|", end=' ')
             index += 1
-        print
-        print "=" * (sum(width) + 3 * len(width))
+        print()
+        print("=" * (sum(width) + 3 * len(width)))
         for result in results["results"]["bindings"]:
             index = 0
             for var in results["head"]["vars"]:
                 result_value = self.__get_prettyprint_string_sparql_var_result(result[var])
-                print result_value.ljust(width[index]), "|",
+                print(result_value.ljust(width[index]), "|", end=' ')
                 index += 1
-            print
+            print()
 
     def __get_results_width(self, results, minWidth=2):
         width = []
diff --git a/SPARQLWrapper/__init__.py b/SPARQLWrapper/__init__.py
index 0ba7aea..d9d3149 100644
--- a/SPARQLWrapper/__init__.py
+++ b/SPARQLWrapper/__init__.py
@@ -1,6 +1,6 @@
 # -*- coding: utf8 -*-
 
-u"""
+"""
 
 **SPARQLWrapper** is a simple Python wrapper around a `SPARQL <https://www.w3.org/TR/sparql11-overview/>`_ service to
 remotelly execute your queries. It helps in creating the query
@@ -30,11 +30,11 @@ __date__ = "2019-04-18"
 __agent__ = "sparqlwrapper %s (rdflib.github.io/sparqlwrapper)" % __version__
 
 
-from Wrapper import SPARQLWrapper
-from Wrapper import XML, JSON, TURTLE, N3, JSONLD, RDF, RDFXML, CSV, TSV
-from Wrapper import GET, POST
-from Wrapper import SELECT, CONSTRUCT, ASK, DESCRIBE, INSERT, DELETE
-from Wrapper import URLENCODED, POSTDIRECTLY
-from Wrapper import BASIC, DIGEST
+from .Wrapper import SPARQLWrapper
+from .Wrapper import XML, JSON, TURTLE, N3, JSONLD, RDF, RDFXML, CSV, TSV
+from .Wrapper import GET, POST
+from .Wrapper import SELECT, CONSTRUCT, ASK, DESCRIBE, INSERT, DELETE
+from .Wrapper import URLENCODED, POSTDIRECTLY
+from .Wrapper import BASIC, DIGEST
 
-from SmartWrapper import SPARQLWrapper2
+from .SmartWrapper import SPARQLWrapper2
